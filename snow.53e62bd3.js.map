{"version":3,"sources":["script/snow.js"],"names":["canvas","ctx","points","maxDist","point","x","Math","random","width","y","height","z","vx","vy","fill","dia","push","update","obj","xpos","pointFun","clearRect","i","length","beginPath","strokeStyle","fillStyle","arc","PI","closePath","stroke","draw","resizeCanvas","window","innerWidth","innerHeight","generatePoints","amount","temp","document","addEventListener","init","getElementById","getContext","setInterval"],"mappings":";CAAA,WACQA,IAAAA,EAAQC,EACRC,EAAS,GACTC,EAAU,IAYLC,SAAAA,IACFC,KAAAA,EAAIC,KAAKC,UAAYP,EAAOQ,MAAQL,GAAWA,EAAU,EACzDM,KAAAA,EAAIH,KAAKC,UAAYP,EAAOU,OAASP,GAAWA,EAAU,EAC1DQ,KAAAA,EAAoB,GAAhBL,KAAKC,SAAiB,GAC1BK,KAAAA,IAAsB,EAAhBN,KAAKC,SAAe,IAAO,KAAKI,EACtCE,KAAAA,IAAsB,IAAhBP,KAAKC,SAAiB,KAAO,KAAKI,EACxCG,KAAAA,KAAO,qBAAuB,GAAMR,KAAKC,SAAW,IAAO,IAC3DQ,KAAAA,KAAuB,IAAhBT,KAAKC,SAAiB,KAAO,KAAKI,EAC9CT,EAAOc,KAAK,MAqBLC,SAAAA,EAAOC,GACdA,EAAIb,GAAKa,EAAIN,GACbM,EAAIT,GAAKS,EAAIL,GACTK,EAAIb,EAAIL,EAAOQ,MAAQL,EAAU,EACnCe,EAAIb,GAAMF,EAAU,EACXe,EAAIC,MAAShB,EAAU,IAChCe,EAAIb,EAAIL,EAAOQ,MAAQL,EAAU,GAE/Be,EAAIT,EAAIT,EAAOU,OAASP,EAAU,EACpCe,EAAIT,GAAMN,EAAU,EACXe,EAAIT,GAAMN,EAAU,IAC7Be,EAAIT,EAAIT,EAAOU,OAASP,EAAU,GAI7BiB,SAAAA,IACPnB,EAAIoB,UAAU,EAAG,EAAGrB,EAAOQ,MAAOR,EAAOU,QACpC,IAAA,IAAIY,EAAI,EAAGA,EAAIpB,EAAOqB,OAAQD,IA3BvBJ,EA4BLhB,EAAOoB,GA3BdrB,EAAIuB,YACJvB,EAAIwB,YAAc,cAClBxB,EAAIyB,UAAYR,EAAIJ,KACpBb,EAAI0B,IAAIT,EAAIb,EAAGa,EAAIT,EAAGS,EAAIH,IAAK,EAAG,EAAIT,KAAKsB,IAC3C3B,EAAI4B,YACJ5B,EAAI6B,SACJ7B,EAAIa,OAsBFG,EAAOf,EAAOoB,IA7BTS,IAAKb,EAiCLc,SAAAA,IACPhC,EAAOQ,MAAQyB,OAAOC,WACtBlC,EAAOU,OAASuB,OAAOE,YACvBjC,EAAS,GA5CFkC,SAAeC,GAEjB,IADDC,IACKhB,EAAI,EAAGA,EAAIe,EAAQf,IACnB,IAAIlB,EA0CbgC,CAAeH,OAAOC,WAAa,GACnCd,IAIFmB,SAASC,iBAAiB,mBAvEjBC,WAEPzC,EAASuC,SAASG,eAAe,QACjCzC,EAAMD,EAAO2C,WAAW,MACxBX,IACAZ,IACAwB,YAAYxB,EAAU,IACtBa,OAAOO,iBAAiB,SAAUR,GAAc,KAgEE,GA5ExD","file":"snow.53e62bd3.js","sourceRoot":"../src","sourcesContent":["(function () {\n    var canvas, ctx;\n    var points = [];\n    var maxDist = 100;\n\n    function init() {\n      //Add on load scripts\n      canvas = document.getElementById('snow');\n      ctx = canvas.getContext('2d');\n      resizeCanvas();\n      pointFun();\n      setInterval(pointFun, 20);\n      window.addEventListener('resize', resizeCanvas, false);\n    }\n    //Particle constructor\n    function point() {\n      this.x = Math.random() * (canvas.width + maxDist) - maxDist / 2;\n      this.y = Math.random() * (canvas.height + maxDist) - maxDist / 2;\n      this.z = Math.random() * 0.5 + 0.5;\n      this.vx = (Math.random() * 2 - 0.5) * this.z;\n      this.vy = (Math.random() * 1.5 + 1.5) * this.z;\n      this.fill = 'rgba(255,255,255,' + (0.4 * Math.random() + 0.5) + ')';\n      this.dia = (Math.random() * 2.5 + 1.5) * this.z;\n      points.push(this);\n    }\n    //Point generator\n    function generatePoints(amount) {\n      var temp;\n      for (var i = 0; i < amount; i++) {\n        temp = new point();\n      }\n      // console.log(points);\n    }\n    //Point drawer\n    function draw(obj) {\n      ctx.beginPath();\n      ctx.strokeStyle = 'transparent';\n      ctx.fillStyle = obj.fill;\n      ctx.arc(obj.x, obj.y, obj.dia, 0, 2 * Math.PI);\n      ctx.closePath();\n      ctx.stroke();\n      ctx.fill();\n    }\n    //Updates point position values\n    function update(obj) {\n      obj.x += obj.vx;\n      obj.y += obj.vy;\n      if (obj.x > canvas.width + maxDist / 2) {\n        obj.x = -(maxDist / 2);\n      } else if (obj.xpos < -(maxDist / 2)) {\n        obj.x = canvas.width + maxDist / 2;\n      }\n      if (obj.y > canvas.height + maxDist / 2) {\n        obj.y = -(maxDist / 2);\n      } else if (obj.y < -(maxDist / 2)) {\n        obj.y = canvas.height + maxDist / 2;\n      }\n    }\n    //\n    function pointFun() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (var i = 0; i < points.length; i++) {\n        draw(points[i]);\n        update(points[i]);\n      }\n    }\n\n    function resizeCanvas() {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      points = [];\n      generatePoints(window.innerWidth / 3);\n      pointFun();\n    }\n\n    //Execute when DOM has loaded\n    document.addEventListener('DOMContentLoaded', init, false);\n  })();"]}